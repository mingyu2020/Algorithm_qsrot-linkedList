#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

void qsort(vector<int> &a, int l, int r) {
  // qsort 파라미터 3개 : 정렬될 배열, 왼쪽 인덱스, 오른쪽 인덱스
  //  vector<int>& a = 정렬할 벡터

  /*왼쪽이 오른쪽보다 작아야 for문 실행
  l 과 r의 값이 같아질 때, element가 하나밖에 없을  */
  if (l >= r) 
    return; //재귀호출 종료 조건
  //(l >= r) = l 과 r의 값의 위치가 똑같아질 때(정렬할 부분 배열의 크기가 0또는 1이면) 함수를 종료

  int p = a[r]; //피벗값을 배열 오른쪽 끝 값으로 설정
  int i = l - 1; // i값은 l 의 하나 전의 위치 = 피벗보다 작은 요소들을 왼쪽을 옮기기 위한 인덱스

  /*왼쪽 인덱스부터 오른쪽 인덱스 r-1 까지 반복하면서 피벗보다 작은 요소 찾음*/
  for (int j = l; j < r; ++j) {
    if (a[j] < p)
      swap(a[++i], a[j]);
    //조건 : j의 값이 피벗값보다 작아야 함.
    //조건을 만족하지 못하면 swap이 발생하지 않으며, j 만 우측으로 한 칸 이동함.
    //조건을 만족하면 i 가 -1에서 0으로 이동, i 와 j 의 값을 바꾸는 swap 수행, 후에 j 는 우측으로 1 증가.
    //결론=>피벗보다 작은 요소를 swap으로 왼쪽으로 이동시킴.
    //j 의 위치가 r-1 까지 왔다면 빠져나감.
  }
  swap(a[++i], a[r]); 
    // i의 한 칸 오른쪽과 피벗값을 바꾸는 swap 수행
    // => i 의 위치가 피벗으로 정해놨던 값보다 작은 값들의 수를 알려주게 됨.
                      //피벗보다 작은 모든요소가 피벗의 왼쪽, 큰 요소는 피벗의
                      //오른쪽에 놓이게 됨.

  /*피벗을 기준으로, 피벗을 포함하지 않는 분할된 두 부분 배열에 대해 qsort 함수를 재귀적으로 호출*/
  qsort(a, l, i - 1);
  qsort(a, i + 1, r); 
            //왼쪽부분 배열( l ~ i-1 )과
            //오른쪽부분 배열( i+1 ~ r )에 대해 재귀 호출 수행하여 정렬
}

int main() {
  vector<int> a = {3, 2, 5, 1, 4}; //정렬할 벡터를 초기화
  qsort(a, 0, a.size() - 1);       //벡터 전체를 정렬
  for (int x : a)
    cout << x << " "; //벡터 출력
  return 0;
}
